#!/usr/bin/env python

import argparse
import os
import re
import shutil
import subprocess
import sys
import urllib.parse
import urllib.request
import zipfile

def _boot_spring(language, java_version, type, project_dir, group_id, artifact_id, name, dependencies):
  base_url = 'https://start.spring.io/starter.zip?'
  query_tuples = [('language', language), ('javaVersion', java_version), ('type', type), ('groupId', group_id), ('artifactId', artifact_id), ('baseDir', project_dir), ('packageName', group_id + '.' + artifact_id)]

  for dependency in dependencies.split(','):
    query_tuples.append(('style', dependency))

  query = urllib.parse.urlencode(query_tuples)
  url = "{base_url}{query}".format(base_url=base_url, query=query)
  req = urllib.request.Request(url)
  
  with urllib.request.urlopen(req) as response:
    file = response.read()
    file_name = "{cwd}/{zip_name}.zip".format(cwd=os.getcwd(), zip_name=project_dir)

    with open(file_name, 'wb') as file_handle:
      file_handle.write(file)

  boot_zip = zipfile.ZipFile(file_name)
  boot_zip.extractall()

  if (os.path.exists(file_name)):
    os.remove(file_name)

def _make_dirs(project_dir, group_id, artifact_id, language):
  src_path = "src/main/{language}".format(language=language)
  base_path = "{project_dir}/{src_path}/{group_id}/{artifact_id}".format(project_dir=project_dir, src_path=src_path, group_id=group_id, artifact_id=artifact_id).replace('.','/')
  dirs = ['api/bindings', 'api/contracts', 'api/controllers', 'configurations', 'entities', 'repositories', 'services']

  for dir in dirs:
    path = "{base_path}/{dir}".format(base_path=base_path, dir=dir)
    if not os.path.isdir(path):
      os.makedirs(path)

  print("Made directories.")

def _setup_configurations(language, project_dir, group_id, artifact_id):
  src_path = "src/main/{language}".format(language=language)
  base_path = "{project_dir}/{src_path}/{group_id}/{artifact_id}".format(project_dir=project_dir, src_path=src_path, group_id=group_id, artifact_id=artifact_id).replace('.','/')
  dirname, filename = os.path.split(os.path.abspath(__file__))
  path = "{dirname}/templates".format(dirname=dirname)

  pkg_path = re.compile('.*/templates/(.*)')

  for (root, dirs, files) in os.walk(path, topdown=False):
    for file in files:
      full_path = os.path.join(root, file)
      match = re.search(pkg_path, full_path)
      target = match.group(1)
      dest = "{base_path}/{target}".format(base_path=base_path, target=target)
      shutil.copy(full_path, dest)

      with open(dest, 'r+') as handle:
        tmp_path = target.rsplit('.', 1)[0]
        rel_path = tmp_path.rsplit('/', 1)[0]
        pkg = "package {group_id}.{artifact_id}.{rel_path};".format(group_id=group_id, artifact_id=artifact_id, rel_path=rel_path).replace('/', '.')
        contents = handle.read()
        handle.seek(0, 0)
        handle.write(pkg + '\n\n' + contents)

  print('Added configuration files.')

def _setup_resources(project_dir):
  res_path = "{project_dir}/src/main/resources".format(project_dir=project_dir)
  dirname, filename = os.path.split(os.path.abspath(__file__))
  path = "{dirname}/resources".format(dirname=dirname)

  for (root, dirs, files) in os.walk(path, topdown=False):
    for file in files:
      dest = "{res_path}/{file}".format(res_path=res_path, file=file)
      shutil.copy(os.path.join(root, file), dest)

  print('Added resource files.')

def _enhance_build(args):
    pass 

def _main(args):
  _boot_spring(args.language, args.java_version, args.type, args.project_dir, args.group_id, args.artifact_id, args.name, args.dependencies)
  _make_dirs(args.project_dir, args.group_id, args.artifact_id, args.language)
  _setup_configurations(args.language, args.project_dir, args.group_id, args.artifact_id)
  _setup_resources(args.project_dir)
  print('Setup complete.')

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='United Shoe')
  parser.add_argument('-a', '--artifact-id', action='store', required=True, type=str, help='project artifact id')
  parser.add_argument('-d', '--dependencies', action='store', required=True, type=str, help='spring boot dependencies')
  parser.add_argument('-g', '--group-id', action='store', required=True, type=str, help='project group id')
  parser.add_argument('-l', '--language', action='store', default='java', choices=['java','groovy', 'kotlin'], type=str, help='project language')
  parser.add_argument('-n', '--name', action='store', required=True, type=str, help='main class name')
  parser.add_argument('-p', '--packaging', action='store', default='jar', type=str, choices=['jar', 'war'], help='packaging type')
  parser.add_argument('-t', '--type', action='store', default='gradle-project', choices=['maven-project', 'gradle-project'], help='project type')
  parser.add_argument('-j', '--java-version', action='store', default=1.8, help='java version', type=float)
  security = parser.add_mutually_exclusive_group()
  security.add_argument('--saml', action='store_true')
  security.add_argument('--oauth', action='store_true')
  parser.add_argument('project_dir')
  args = parser.parse_args()

  _main(args)
